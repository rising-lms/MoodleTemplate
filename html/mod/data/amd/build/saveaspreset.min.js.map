{"version":3,"file":"saveaspreset.min.js","sources":["../src/saveaspreset.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module for saving a database as a preset.\n *\n * @module      mod_data/saveaspreset\n * @copyright   2021 Mihail Geshoski <mihail@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalForm from 'core_form/modalform';\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport {add as addToast} from 'core/toast';\n\nconst selectors = {\n    saveAsPresetButton: '[data-action=\"saveaspreset\"]',\n};\n\n/**\n * Initialize module\n */\nexport const init = () => {\n    const saveAsPresetButton = document.querySelector(selectors.saveAsPresetButton);\n\n    saveAsPresetButton.addEventListener('click', event => {\n        event.preventDefault();\n\n        const modalForm = new ModalForm({\n            modalConfig: {\n                title: getString('savedataaspreset', 'mod_data'),\n            },\n            formClass: 'mod_data\\\\form\\\\save_as_preset',\n            args: {d: saveAsPresetButton.getAttribute('data-dataid')},\n            saveButtonText: getString('save'),\n            returnFocus: saveAsPresetButton,\n        });\n\n        // Show a toast notification when the form is submitted.\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, event => {\n            if (event.detail.result) {\n                getString('savesuccess', 'data').then(addToast).catch();\n            } else {\n                Notification.addNotification({\n                    type: 'error',\n                    message:  event.detail.errors.join('<br>')\n                });\n            }\n        });\n\n        modalForm.show();\n    });\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_modalform","_notification","selectors","_exports","init","saveAsPresetButton","document","querySelector","addEventListener","event","preventDefault","modalForm","ModalForm","modalConfig","title","getString","formClass","args","d","getAttribute","saveButtonText","get_string","returnFocus","events","FORM_SUBMITTED","detail","result","then","addToast","catch","Notification","addNotification","type","message","errors","join","show"],"mappings":"sKAwB6C,SAAAA,uBAAAC,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA;;;;;;;kFAD7CG,WAAAJ,uBAAAI,YACAC,cAAAL,uBAAAK,eAIA,MAAMC,6BACkB,+BAoCtBC,SAAAC,KA9BkBA,KAChB,MAAMC,mBAAqBC,SAASC,cAAcL,8BAElDG,mBAAmBG,iBAAiB,SAASC,QACzCA,MAAMC,iBAEN,MAAMC,UAAY,IAAIC,WAAAA,QAAU,CAC5BC,YAAa,CACTC,OAAO,EAAAC,KAAAA,YAAU,mBAAoB,aAEzCC,UAAW,iCACXC,KAAM,CAACC,EAAGb,mBAAmBc,aAAa,gBAC1CC,gBAAgB,EAAAL,KAASM,YAAC,QAC1BC,YAAajB,qBAIjBM,UAAUH,iBAAiBG,UAAUY,OAAOC,gBAAgBf,QACpDA,MAAMgB,OAAOC,QACb,EAAAX,KAASM,YAAC,cAAe,QAAQM,KAAKC,OAAAA,KAAUC,QAEhDC,cAAY/B,QAACgC,gBAAgB,CACzBC,KAAM,QACNC,QAAUxB,MAAMgB,OAAOS,OAAOC,KAAK,SAE3C,IAGJxB,UAAUyB,MAAM,GAClB,CACJ"}