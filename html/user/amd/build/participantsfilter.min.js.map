{"version":3,"file":"participantsfilter.min.js","sources":["../src/participantsfilter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Participants filter managemnet.\n *\n * @module     core_user/participants_filter\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CourseFilter from './local/participantsfilter/filtertypes/courseid';\nimport * as DynamicTable from 'core_table/dynamic';\nimport GenericFilter from './local/participantsfilter/filter';\nimport {get_strings as getStrings} from 'core/str';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Selectors from './local/participantsfilter/selectors';\nimport Templates from 'core/templates';\nimport CustomEvents from 'core/custom_interaction_events';\nimport jQuery from 'jquery';\n\n/**\n * Initialise the participants filter on the element with the given id.\n *\n * @param {String} participantsRegionId\n */\nexport const init = participantsRegionId => {\n    // Keep a reference to the filterset.\n    const filterSet = document.querySelector(`#${participantsRegionId}`);\n\n    // Keep a reference to all of the active filters.\n    const activeFilters = {\n        courseid: new CourseFilter('courseid', filterSet),\n    };\n\n    /**\n     * Get the filter list region.\n     *\n     * @return {HTMLElement}\n     */\n    const getFilterRegion = () => filterSet.querySelector(Selectors.filterset.regions.filterlist);\n\n    /**\n     * Add an unselected filter row.\n     *\n     * @return {Promise}\n     */\n    const addFilterRow = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:addFilterRow');\n\n        const rownum = 1 + getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        return Templates.renderForPromise('core_user/local/participantsfilter/filterrow', {\"rownumber\": rownum})\n        .then(({html, js}) => {\n            const newContentNodes = Templates.appendNodeContents(getFilterRegion(), html, js);\n\n            return newContentNodes;\n        })\n        .then(filterRow => {\n            // Note: This is a nasty hack.\n            // We should try to find a better way of doing this.\n            // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n            // it in place.\n            const typeList = filterSet.querySelector(Selectors.data.typeList);\n\n            filterRow.forEach(contentNode => {\n                const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                if (contentTypeList) {\n                    contentTypeList.innerHTML = typeList.innerHTML;\n                }\n            });\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            updateFiltersOptions();\n\n            return filterRow;\n        })\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Get the filter data source node fro the specified filter type.\n     *\n     * @param {String} filterType\n     * @return {HTMLElement}\n     */\n    const getFilterDataSource = filterType => {\n        const filterDataNode = filterSet.querySelector(Selectors.filterset.regions.datasource);\n\n        return filterDataNode.querySelector(Selectors.data.fields.byName(filterType));\n    };\n\n    /**\n     * Add a filter to the list of active filters, performing any necessary setup.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {String} filterType\n     * @param {Array} initialFilterValues The initially selected values for the filter\n     * @returns {Filter}\n     */\n    const addFilter = async(filterRow, filterType, initialFilterValues) => {\n        // Name the filter on the filter row.\n        filterRow.dataset.filterType = filterType;\n\n        const filterDataNode = getFilterDataSource(filterType);\n\n        // Instantiate the Filter class.\n        let Filter = GenericFilter;\n        if (filterDataNode?.dataset.filterTypeClass) {\n            Filter = await import(filterDataNode.dataset.filterTypeClass);\n        }\n        activeFilters[filterType] = new Filter(filterType, filterSet, initialFilterValues);\n\n        // Disable the select.\n        const typeField = filterRow.querySelector(Selectors.filter.fields.type);\n        typeField.value = filterType;\n        typeField.disabled = 'disabled';\n\n        // Update the list of available filter types.\n        updateFiltersOptions();\n\n        return activeFilters[filterType];\n    };\n\n    /**\n     * Get the registered filter class for the named filter.\n     *\n     * @param {String} name\n     * @return {Object} See the Filter class.\n     */\n    const getFilterObject = name => {\n        return activeFilters[name];\n    };\n\n    /**\n     * Remove or replace the specified filter row and associated class, ensuring that if there is only one filter row,\n     * that it is replaced instead of being removed.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    const removeOrReplaceFilterRow = (filterRow, refreshContent) => {\n        const filterCount = getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n\n        if (filterCount === 1) {\n            replaceFilterRow(filterRow, refreshContent);\n        } else {\n            removeFilterRow(filterRow, refreshContent);\n        }\n    };\n\n    /**\n     * Remove the specified filter row and associated class.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    const removeFilterRow = async(filterRow, refreshContent = true) => {\n        const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n        const hasFilterValue = !!filterType.value;\n\n        // Remove the filter object.\n        removeFilterObject(filterRow.dataset.filterType);\n\n        // Remove the actual filter HTML.\n        filterRow.remove();\n\n        // Update the list of available filter types.\n        updateFiltersOptions();\n\n        if (hasFilterValue && refreshContent) {\n            // Refresh the table if there was any content in this row.\n            updateTableFromFilter();\n        }\n\n        // Update filter fieldset legends.\n        const filterLegends = await getAvailableFilterLegends();\n\n        getFilterRegion().querySelectorAll(Selectors.filter.region).forEach((filterRow, index) => {\n            filterRow.querySelector('legend').innerText = filterLegends[index];\n        });\n\n    };\n\n    /**\n     * Replace the specified filter row with a new one.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     * @param {Number} rowNum The number used to label the filter fieldset legend (eg Row 1). Defaults to 1 (the first filter).\n     * @return {Promise}\n     */\n    const replaceFilterRow = (filterRow, refreshContent = true, rowNum = 1) => {\n        // Remove the filter object.\n        removeFilterObject(filterRow.dataset.filterType);\n\n        return Templates.renderForPromise('core_user/local/participantsfilter/filterrow', {\"rownumber\": rowNum})\n        .then(({html, js}) => {\n            const newContentNodes = Templates.replaceNode(filterRow, html, js);\n\n            return newContentNodes;\n        })\n        .then(filterRow => {\n            // Note: This is a nasty hack.\n            // We should try to find a better way of doing this.\n            // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n            // it in place.\n            const typeList = filterSet.querySelector(Selectors.data.typeList);\n\n            filterRow.forEach(contentNode => {\n                const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                if (contentTypeList) {\n                    contentTypeList.innerHTML = typeList.innerHTML;\n                }\n            });\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            updateFiltersOptions();\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            // Refresh the table.\n            if (refreshContent) {\n                return updateTableFromFilter();\n            } else {\n                return filterRow;\n            }\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Remove the Filter Object from the register.\n     *\n     * @param {string} filterName The name of the filter to be removed\n     */\n    const removeFilterObject = filterName => {\n        if (filterName) {\n            const filter = getFilterObject(filterName);\n            if (filter) {\n                filter.tearDown();\n\n                // Remove from the list of active filters.\n                delete activeFilters[filterName];\n            }\n        }\n    };\n\n    /**\n     * Remove all filters.\n     *\n     * @returns {Promise}\n     */\n    const removeAllFilters = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:setFilterFromConfig');\n\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => removeOrReplaceFilterRow(filterRow, false));\n\n        // Refresh the table.\n        return updateTableFromFilter()\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        });\n    };\n\n    /**\n     * Remove any empty filters.\n     */\n    const removeEmptyFilters = () => {\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n            if (!filterType.value) {\n                removeOrReplaceFilterRow(filterRow, false);\n            }\n        });\n    };\n\n    /**\n     * Update the list of filter types to filter out those already selected.\n     */\n    const updateFiltersOptions = () => {\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const options = filterRow.querySelectorAll(Selectors.filter.fields.type + ' option');\n            options.forEach(option => {\n                if (option.value === filterRow.dataset.filterType) {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                } else if (activeFilters[option.value]) {\n                    option.classList.add('hidden');\n                    option.disabled = true;\n                } else {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                }\n            });\n        });\n\n        // Configure the state of the \"Add row\" button.\n        // This button is disabled when there is a filter row available for each condition.\n        const addRowButton = filterSet.querySelector(Selectors.filterset.actions.addRow);\n        const filterDataNode = filterSet.querySelectorAll(Selectors.data.fields.all);\n        if (filterDataNode.length <= filters.length) {\n            addRowButton.setAttribute('disabled', 'disabled');\n        } else {\n            addRowButton.removeAttribute('disabled');\n        }\n\n        if (filters.length === 1) {\n            filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.add('hidden');\n            filterSet.querySelector(Selectors.filterset.fields.join).value = 2;\n            filterSet.dataset.filterverb = 2;\n        } else {\n            filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.remove('hidden');\n        }\n    };\n\n    /**\n     * Set the current filter options based on a provided configuration.\n     *\n     * @param {Object} config\n     * @param {Number} config.jointype\n     * @param {Object} config.filters\n     * @returns {Promise}\n     */\n    const setFilterFromConfig = config => {\n        const filterConfig = Object.entries(config.filters);\n\n        if (!filterConfig.length) {\n            // There are no filters to set from.\n            return Promise.resolve();\n        }\n\n        // Set the main join type.\n        filterSet.querySelector(Selectors.filterset.fields.join).value = config.jointype;\n\n        const filterPromises = filterConfig.map(([filterType, filterData]) => {\n            if (filterType === 'courseid') {\n                // The courseid is a special case.\n                return false;\n            }\n\n            const filterValues = filterData.values;\n\n            if (!filterValues.length) {\n                // There are no values for this filter.\n                // Skip it.\n                return false;\n            }\n\n            return addFilterRow().then(([filterRow]) => addFilter(filterRow, filterType, filterValues));\n        }).filter(promise => promise);\n\n        if (!filterPromises.length) {\n            return Promise.resolve();\n        }\n\n        return Promise.all(filterPromises).then(() => {\n            return removeEmptyFilters();\n        })\n        .then(updateFiltersOptions)\n        .then(updateTableFromFilter);\n    };\n\n    /**\n     * Update the Dynamic table based upon the current filter.\n     *\n     * @return {Promise}\n     */\n    const updateTableFromFilter = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:updateTableFromFilter');\n\n        const filters = {};\n        Object.values(activeFilters).forEach(filter => {\n            filters[filter.filterValue.name] = filter.filterValue;\n        });\n\n        return DynamicTable.setFilters(\n            DynamicTable.getTableFromId(filterSet.dataset.tableRegion),\n            {\n                jointype: parseInt(filterSet.querySelector(Selectors.filterset.fields.join).value, 10),\n                filters,\n            }\n        )\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Fetch the strings used to populate the fieldset legends for the maximum number of filters possible.\n     *\n     * @return {array}\n     */\n    const getAvailableFilterLegends = async() => {\n        const maxFilters = document.querySelector(Selectors.data.typeListSelect).length - 1;\n        let requests = [];\n\n        [...Array(maxFilters)].forEach((_, rowIndex) => {\n            requests.push({\n                \"key\": \"filterrowlegend\",\n                \"component\": \"core_user\",\n                // Add 1 since rows begin at 1 (index begins at zero).\n                \"param\": rowIndex + 1\n            });\n        });\n\n        const legendStrings = await getStrings(requests)\n        .then(fetchedStrings => {\n            return fetchedStrings;\n        })\n        .catch(Notification.exception);\n\n        return legendStrings;\n    };\n\n    // Add listeners for the main actions.\n    filterSet.querySelector(Selectors.filterset.region).addEventListener('click', e => {\n        if (e.target.closest(Selectors.filterset.actions.addRow)) {\n            e.preventDefault();\n\n            addFilterRow();\n        }\n\n        if (e.target.closest(Selectors.filterset.actions.applyFilters)) {\n            e.preventDefault();\n\n            updateTableFromFilter();\n        }\n\n        if (e.target.closest(Selectors.filterset.actions.resetFilters)) {\n            e.preventDefault();\n\n            removeAllFilters();\n        }\n    });\n\n    // Add the listener to remove a single filter.\n    filterSet.querySelector(Selectors.filterset.regions.filterlist).addEventListener('click', e => {\n        if (e.target.closest(Selectors.filter.actions.remove)) {\n            e.preventDefault();\n\n            removeOrReplaceFilterRow(e.target.closest(Selectors.filter.region), true);\n        }\n    });\n\n    // Add listeners for the filter type selection.\n    let filterRegion = jQuery(getFilterRegion());\n    CustomEvents.define(filterRegion, [CustomEvents.events.accessibleChange]);\n    filterRegion.on(CustomEvents.events.accessibleChange, e => {\n        const typeField = e.target.closest(Selectors.filter.fields.type);\n        if (typeField && typeField.value) {\n            const filter = e.target.closest(Selectors.filter.region);\n\n            addFilter(filter, typeField.value);\n        }\n    });\n\n    filterSet.querySelector(Selectors.filterset.fields.join).addEventListener('change', e => {\n        filterSet.dataset.filterverb = e.target.value;\n    });\n\n    const tableRoot = DynamicTable.getTableFromId(filterSet.dataset.tableRegion);\n    const initialFilters = DynamicTable.getFilters(tableRoot);\n    if (initialFilters) {\n        const initialFilterPromise = new Pending('core_user/participantsfilter:setFilterFromConfig');\n        // Apply the initial filter configuration.\n        setFilterFromConfig(initialFilters)\n        .then(() => initialFilterPromise.resolve())\n        .catch();\n    }\n};\n"],"names":["_courseid","_interopRequireDefault","DynamicTable","obj","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_filter","_notification","_pending","_selectors","_templates","_custom_interaction_events","_jquery","_systemImportTransformerGlobalIdentifier","window","self","global","WeakMap","cacheBabelInterop","cacheNodeInterop","_exports","init","participantsRegionId","filterSet","document","querySelector","concat","activeFilters","courseid","CourseFilter","getFilterRegion","Selectors","filterset","regions","filterlist","addFilterRow","pendingPromise","Pending","rownum","querySelectorAll","filter","region","length","Templates","renderForPromise","rownumber","then","_ref","html","js","appendNodeContents","filterRow","typeList","data","forEach","contentNode","contentTypeList","fields","type","innerHTML","updateFiltersOptions","result","resolve","catch","Notification","exception","addFilter","async","filterType","initialFilterValues","dataset","filterDataNode","datasource","byName","getFilterDataSource","Filter","GenericFilter","filterTypeClass","define","amd","Promise","reject","require","module","exports","component","loader","typeField","value","disabled","removeOrReplaceFilterRow","refreshContent","replaceFilterRow","removeFilterRow","arguments","undefined","hasFilterValue","removeFilterObject","remove","updateTableFromFilter","filterLegends","getAvailableFilterLegends","index","innerText","rowNum","_ref2","replaceNode","filterName","tearDown","filters","option","classList","add","addRowButton","actions","addRow","all","setAttribute","removeAttribute","filtermatch","join","filterverb","setFilterFromConfig","config","filterConfig","entries","jointype","filterPromises","map","_ref3","filterData","filterValues","values","_ref4","promise","filterValue","name","setFilters","getTableFromId","tableRegion","parseInt","maxFilters","typeListSelect","requests","Array","_","rowIndex","push","param","getStrings","get_strings","fetchedStrings","addEventListener","e","target","closest","preventDefault","applyFilters","resetFilters","removeAllFilters","filterRegion","jQuery","CustomEvents","events","accessibleChange","on","tableRoot","initialFilters","getFilters","initialFilterPromise"],"mappings":"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"}